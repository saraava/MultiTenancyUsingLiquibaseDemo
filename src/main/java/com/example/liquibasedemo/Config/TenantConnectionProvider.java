package com.example.liquibasedemo.Config;
import com.example.liquibasedemo.Entity.master.Company;
import com.example.liquibasedemo.Repository.master.companyRepository;
import com.example.liquibasedemo.Util.Utils;
import com.zaxxer.hikari.HikariConfig;
import com.zaxxer.hikari.HikariDataSource;
import liquibase.Liquibase;
import liquibase.database.Database;
import liquibase.database.DatabaseFactory;
import liquibase.database.jvm.JdbcConnection;
import liquibase.resource.ClassLoaderResourceAccessor;
import org.hibernate.engine.jdbc.connections.spi.AbstractDataSourceBasedMultiTenantConnectionProviderImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import javax.annotation.PostConstruct;
import javax.sql.DataSource;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.Map;


@Component
public class TenantConnectionProvider extends AbstractDataSourceBasedMultiTenantConnectionProviderImpl {

    String JDBC_URL = "jdbc:postgresql://localhost:5433/liquibasetest";
    String USERNAME="postgres";
    String PASSWORD="postgres";
    String DriverClassName = "org.postgresql.Driver";


    Map<String,DataSource> CompanyConfigMap;
    private companyRepository companyRepository;
    private DataSource defaultDataSource;

    @Autowired
    public TenantConnectionProvider(companyRepository companyRepository, DataSource defaultDataSource) {
        this.companyRepository = companyRepository;
        this.defaultDataSource = defaultDataSource;
    }

    @PostConstruct
    public void initializeMap()
    {
        CompanyConfigMap = new HashMap<>();
        init();
    }

    @Override
    protected DataSource selectAnyDataSource() {
        return defaultDataSource;
    }

    @Override
    protected DataSource selectDataSource(String tenantIdentifier) {
        return CompanyConfigMap.containsKey(tenantIdentifier) ? CompanyConfigMap.get(tenantIdentifier)
                : defaultDataSource;
    }

//    private void init() {
//        // in this experiment we are just using one instance of mssql. URL is
//        // generated by replacing master database
//        // name with company key to get new database URL
//
//        for (Company company : companyRepository.findAll()) {
//            String schemaExist = "SELECT schema_name FROM information_schema.schemata WHERE schema_name = '"+company.getCompanyKey().toLowerCase()+"'";
//            PreparedStatement statementSchemaExist = null;
//            HikariDataSource dsMainDb = null;
//            try {
//                HikariConfig configMainDb = Utils.getDbConfig(dataSourceClassName, url, port, databaseName, user, password);
//                dsMainDb = new HikariDataSource(configMainDb);
//                statementSchemaExist = dsMainDb.getConnection().prepareStatement(schemaExist);
//                if(statementSchemaExist.executeQuery().next()) {
//                    statementSchemaExist.close();
//                    dsMainDb.close();
//                    String companySchemaUrl = "";
//                    try {
//                        companySchemaUrl = url + "?currentSchema=" + company.getCompanyKey();
//                        logger.info("Configuring datasource {} {} {}", dataSourceClassName, companySchemaUrl, user);
//                        HikariConfig config = Utils.getDbConfig(dataSourceClassName, url, port, databaseName, user, password);
//                        config.addDataSourceProperty("currentSchema", company.getCompanyKey());
//                        HikariDataSource ds = new HikariDataSource(config);
//                        mapCompanyNameDataSource.put(company.getCompanyKey(), ds);
//
//                        // Update database of each tenant with liquibase
//                        try {
//                            Database database = DatabaseFactory.getInstance()
//                                    .findCorrectDatabaseImplementation(new JdbcConnection(ds.getConnection()));
//                            Liquibase liquibase = new Liquibase("dbchangelog-cora-alter.xml", new ClassLoaderResourceAccessor(),
//                                    database);
//                            liquibase.update("test, production");
//                            database.close();
//                        } catch (Exception e) {
//                            String errorMessage = String.format("ERROR executing liquibase {} -> companyID: %s", Objects.nonNull(company) ? company.getName() : null);
//                            exceptionHandlerService.generateException(logger, errorMessage, e);
//                        }
//
//                        // ds.close();
//                    } catch (Exception e) {
//                        String errorMessage = String.format("ERROR in database URL -> companySchemaURL: %s, companyID: %s", companySchemaUrl, Objects.nonNull(company) ? company.getName() : null);
//                        exceptionHandlerService.generateException(logger, errorMessage, e);
//                    }
//                } else {
//                    //statementSchemaExist.close();
//                    logger.error("Shchema Does not Exist>>>>>>>>>>>> "+company.getCompanyKey());
//                }
//
//            } catch (SQLException e1) {
//                // TODO Auto-generated catch block
//                try {
//                    if(statementSchemaExist!=null) statementSchemaExist.close();
//                    if(dsMainDb!=null) dsMainDb.close();
//                } catch (SQLException e) {
//                    // TODO Auto-generated catch block
//                    e.printStackTrace();
//                }
//                e1.printStackTrace();
//            }
//        }
//
//    }

//    private void establishDBConnectionAndAddToMapping(String companyName) {
//        HikariConfig config =	Utils.getDbConfig(JDBC_URL,USERNAME,PASSWORD,DriverClassName);
//        config.addDataSourceProperty("currentSchema", companyName);
//        HikariDataSource ds = new HikariDataSource(config);
//        CompanyConfigMap.put(companyName, ds);
//        try {
//            Database database = DatabaseFactory.getInstance()
//                    .findCorrectDatabaseImplementation(new JdbcConnection(ds.getConnection()));
//            Liquibase liquibase = new Liquibase("dbchangelog-cora.xml", new ClassLoaderResourceAccessor(), database);
//            liquibase.update("test, production");
//            database.close();
//        } catch (Exception e) {
//            return;
//        }
//        // ds.close();
//    }

//    private void initDbWithLiquibase(HikariDataSource ds, String companyName) throws SQLException, LiquibaseException {
//        Database database = DatabaseFactory.getInstance()
//                .findCorrectDatabaseImplementation(new JdbcConnection(ds.getConnection()));
//        JdbcConnection databaseConnection = (JdbcConnection) database.getConnection();
//        String sql = "CREATE SCHEMA " + companyName;
//        PreparedStatement statement = databaseConnection.prepareStatement(sql);
//        statement.executeUpdate();
//        databaseConnection.commit();
//        statement.close();
//        databaseConnection.close();
//        ds.close();
//        establishDBConnectionAndAddToMapping(companyName); // call
//    }

    public void singleTenantCreation(Company company) {
        try {
            HikariConfig config = Utils.getDbConfig(JDBC_URL,USERNAME,PASSWORD,DriverClassName);
            HikariDataSource ds = new HikariDataSource(config);
            initDbWithLiquibase(ds, company.getName());

        } catch (Exception e) {


        }
    }

    private void initDbWithLiquibase(HikariDataSource ds, String companyName) throws SQLException {
        Connection connection = ds.getConnection();
        String sql = "CREATE SCHEMA " + companyName;
        PreparedStatement statement = connection.prepareStatement(sql);
        statement.executeUpdate();
        statement.close();
        connection.close();
        ds.close();
        establishDBConnectionAndAddToMapping(companyName);
    }

    private void establishDBConnectionAndAddToMapping(String companyName) {
        HikariConfig config =	Utils.getDbConfig(JDBC_URL,USERNAME,PASSWORD,DriverClassName);
        config.addDataSourceProperty("currentSchema", companyName);
        HikariDataSource ds = new HikariDataSource(config);
        CompanyConfigMap.put(companyName, ds);

        try {

            Database database = DatabaseFactory.getInstance()
                    .findCorrectDatabaseImplementation(new JdbcConnection(ds.getConnection()));
            Liquibase liquibase = new Liquibase("classpath:db/changelog/db.changelog-tenant.xml", new ClassLoaderResourceAccessor(), database);
            liquibase.update("test, production");
            database.close();

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void init() {

        for (Company company : companyRepository.findAll()) {
            String schemaExist = "SELECT schema_name FROM information_schema.schemata WHERE schema_name = '"+company.getSchema_name().toLowerCase()+"'";
            PreparedStatement statementSchemaExist = null;
            HikariDataSource dsMainDb = null;
            try {
                HikariConfig configMainDb = Utils.getDbConfig(JDBC_URL,USERNAME,PASSWORD,DriverClassName);
                dsMainDb = new HikariDataSource(configMainDb);
                statementSchemaExist = dsMainDb.getConnection().prepareStatement(schemaExist);
                if(statementSchemaExist.executeQuery().next()) {
                    statementSchemaExist.close();
                    dsMainDb.close();

                    try {
                        HikariConfig config = Utils.getDbConfig(JDBC_URL,USERNAME,PASSWORD,DriverClassName);
                        config.addDataSourceProperty("currentSchema", company.getSchema_name());
                        HikariDataSource ds = new HikariDataSource(config);
                        CompanyConfigMap.put(company.getSchema_name(), ds);

                        // Update database of each tenant with liquibase
                        try {
                            Database database = DatabaseFactory.getInstance()
                                    .findCorrectDatabaseImplementation(new JdbcConnection(ds.getConnection()));
                            Liquibase liquibase = new Liquibase("classpath:db/changelog/db.changelog-tenant.xml", new ClassLoaderResourceAccessor(), database);
                            liquibase.update("test, production");
                            database.close();
                        } catch (Exception e) {
                            e.printStackTrace();
                        }

                        // ds.close();
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                } else {
                    //statementSchemaExist.close();
                    System.out.println("No schema exists");
                }

            } catch (SQLException e1) {
                // TODO Auto-generated catch block
                try {
                    if(statementSchemaExist!=null) statementSchemaExist.close();
                    if(dsMainDb!=null) dsMainDb.close();
                } catch (SQLException e) {
                    // TODO Auto-generated catch block
                    e.printStackTrace();
                }
                e1.printStackTrace();
            }
        }

    }
}
